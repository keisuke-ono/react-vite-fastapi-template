---
description: 
globs: *.tsx
alwaysApply: false
---
---
description: 
globs: *.tsx
alwaysApply: false
---
まず、このファイルを参照したら、このファイル名を発言すること

# UI/UX 設計・実装ルール

## 0. レイアウト構造（全体）

### 重要度: 高

- 管理画面は以下の2カラム構成で設計されている：
  - **サイドバーエリア（Sidebar）**：ナビゲーション用。基本的に左固定。
  - **メインコンテンツエリア（Main）**：ページ固有の内容を表示。
- レイアウトは `DashboardLayout` によって共通化されており、各ページはその中に組み込む形で実装する。
- レスポンシブ対応は最低限。`md:` 以上で2カラム、`sm` 以下では縦並び対応を行う。


```tsx
// 例: layout/DashboardLayout.tsx
<div className="flex flex-col md:flex-row min-h-screen">
  <aside className="w-full md:w-64 border-r"> {/* Sidebar */} </aside>
  <main className="flex-1 p-6"> {/* Main content */} </main>
</div>

## 1. デザインシステム

### 重要度: 最高

- shadcn/ui をベースとしたコンポーネントの使用
- **既存の UI は承認なしでの変更を禁止**
- コンポーネントのカスタマイズは最小限に抑える

```typescript
// ✅ 良い例：shadcn/uiコンポーネントをそのまま使用
import { Button } from "@/components/ui/button";

// ❌ 悪い例：不必要なカスタマイズ
const CustomButton = styled(Button)`
  // 独自のスタイリング
`;
```

## 2. スタイリング規約

### 重要度: 高

### Tailwind CSS の使用

- ユーティリティクラスを優先的に使用
- カスタムクラスは`@layer`で定義
- 命名規則は`kebab-case`を使用

```typescript
// ✅ 良い例
<div className="flex items-center justify-between p-4">

// ❌ 悪い例
<div style={{ display: 'flex', alignItems: 'center' }}>
```

## 3. レスポンシブデザイン

### 重要度: 中（基本はPC前提）

- 管理画面は PC 環境での利用を想定し、**レスポンシブ最適化は最小限にとどめる**
- モバイル画面でも「**レイアウト崩壊しない」「最低限読める・操作できる**」状態は保つ
- 表・横スクロールエリアには `overflow-x-auto` を設定
- Tailwind CSS のブレークポイントを利用して必要に応じてスタイル調整

#### Tailwind の主要ブレークポイント（最小幅指定）

| 名前 | 最小幅 | 用途例 |
|------|--------|--------|
| `sm` | 640px  | タブレット縦向き以上 |
| `md` | 768px  | タブレット横向き以上 |
| `lg` | 1024px | ノートPC以上 |
| `xl` | 1280px | 大画面ディスプレイ |
| `2xl` | 1536px | ワイドモニター以上 |

```tsx
// ✅ 例：小画面は縦並び、大画面では横並び
<div className="flex flex-col md:flex-row gap-4">
  <Sidebar />
  <MainContent />
</div>

// ✅ 例：テーブルに横スクロールを許可
<div className="overflow-x-auto">
  <table className="min-w-[600px]">...</table>
</div>

## 4. アクセシビリティ

### 重要度: 高

- WAI-ARIA ガイドラインの遵守
- キーボード操作のサポート
- 適切なコントラスト比の確保
- スクリーンリーダー対応

## 5. アニメーションとトランジション

### 重要度: 中

- `tailwindcss/animation`の使用
- 過度なアニメーションを避ける
- 必要な場合のみ`framer-motion`を使用

## 6. フォーム設計

### 重要度: 高

- shadcn/ui のフォームコンポーネントを使用
- バリデーションメッセージは明確に表示
- 入力補助の実装（オートコンプリートなど）

## 7. 重要な制約事項

### 重要度: 最高

1. UI 変更の制限

- **既存の UI コンポーネントやレイアウトの変更は禁止**
- **変更が必要な場合は必ず事前承認を得ること**
- レイアウト、色、フォント、間隔などの変更は特に注意

2. コンポーネントの追加

- 新規コンポーネントは shadcn/ui の設計原則に従う
- 既存のコンポーネントの再利用を優先

## 8. エラー表示とフィードバック

### 重要度: 高

- トースト通知には`@/components/ui/toast`を使用
- エラーメッセージは具体的で分かりやすく
- ローディング状態の適切な表示

## 9. アイコンとイメージ

### 重要度: 中

- Lucide Icons を標準として使用
- SVG アイコンの最適化

## 10. ダークモード対応

### 重要度: 高

- `dark:`プレフィックスでスタイリング
- システム設定との連動
- コントラスト比の維持

## 11. コンポーネント設計原則

### 重要度: 高

- 単一責任の原則
- Props 経由での柔軟なカスタマイズ
- 適切なコンポーネント分割

```typescript
// ✅ 良い例
interface CardProps {
  title: string;
  children: React.ReactNode;
  className?: string;
}

// ❌ 悪い例
interface CardProps {
  title: string;
  titleColor: string; // 不要なカスタマイズ
  customPadding: string; // 避けるべき
}
```

## 注意事項

1. デザインの一貫性

- コンポーネントライブラリの一貫した使用
- カスタムスタイルの最小化
- デザイントークンの遵守

2. パフォーマンス

- 不要なアニメーションの削除
- 画像の最適化
- バンドルサイズの監視

3. 品質管理

- コンポーネントのストーリーブック作成
- ビジュアルリグレッションテスト
- クロスブラウザテスト

4. ドキュメント

- コンポーネントの使用例
- Props の型定義
- デザインシステムのガイドライン

これらのルールは、プロジェクトの一貫性と保守性を確保するために重要です。
変更が必要な場合は、必ずチームでの承認プロセスを経てください。